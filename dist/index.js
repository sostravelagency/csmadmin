"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("dotenv/config");
var _models = require("./models");
var _api = require("./api");
var _config2 = _interopRequireDefault(require("./config"));
var _app = _interopRequireDefault(require("./app"));
require("./errors");
var _scheduler = _interopRequireDefault(require("./scheduler"));
var _path = _interopRequireDefault(require("path"));
var _cors = _interopRequireDefault(require("cors"));
var _cronjob = _interopRequireDefault(require("./cronjob"));
// import kue from './kue';

global.appRoot = _path["default"].resolve(__dirname);
var PORT = _config2["default"].app.port;
var app = _app["default"].setup(_config2["default"]);

/*cors handling*/
app.use((0, _cors["default"])());

/* Route handling */
app.use("/api", _api.restRouter);
// app.use('/', webRouter);

app.use(function (error, req, res, next) {
  if (!(error instanceof RequestError)) {
    error = new RequestError("Some Error Occurred", 500, error.message);
  }
  error.status = error.status || 500;
  res.status(error.status);
  var contype = req.headers["content-type"];
  var json = !(!contype || contype.indexOf("application/json") !== 0);
  if (json) {
    return res.json({
      errors: error.errorList
    });
  } else {
    res.render(error.status.toString(), {
      layout: null
    });
  }
});

// kue.init();
/* Database Connection */
_models.db.sequelize.authenticate().then(function () {
  console.log("Nice! Database looks fine");
  _scheduler["default"].init();
})["catch"](function (err) {
  console.log(err, "Something went wrong with the Database Update!");
});
_cronjob["default"].start();

/* Start Listening service */
app.listen(PORT, function () {
  console.log("Server is running at PORT http://localhost:".concat(PORT));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZXF1aXJlIiwiX21vZGVscyIsIl9hcGkiLCJfY29uZmlnMiIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfYXBwIiwiX3NjaGVkdWxlciIsIl9wYXRoIiwiX2NvcnMiLCJfY3JvbmpvYiIsImdsb2JhbCIsImFwcFJvb3QiLCJwYXRoIiwicmVzb2x2ZSIsIl9fZGlybmFtZSIsIlBPUlQiLCJjb25maWciLCJhcHAiLCJwb3J0IiwiYXBwTWFuYWdlciIsInNldHVwIiwidXNlIiwiY29ycyIsInJlc3RSb3V0ZXIiLCJlcnJvciIsInJlcSIsInJlcyIsIm5leHQiLCJSZXF1ZXN0RXJyb3IiLCJtZXNzYWdlIiwic3RhdHVzIiwiY29udHlwZSIsImhlYWRlcnMiLCJqc29uIiwiaW5kZXhPZiIsImVycm9ycyIsImVycm9yTGlzdCIsInJlbmRlciIsInRvU3RyaW5nIiwibGF5b3V0IiwiZGIiLCJzZXF1ZWxpemUiLCJhdXRoZW50aWNhdGUiLCJ0aGVuIiwiY29uc29sZSIsImxvZyIsInNjaGVkdWxlciIsImluaXQiLCJlcnIiLCJjaGVja0V4cGlyZWRWb3VjaGVycyIsInN0YXJ0IiwibGlzdGVuIiwiY29uY2F0Il0sInNvdXJjZXMiOlsiLi4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBcImRvdGVudi9jb25maWdcIjtcclxuaW1wb3J0IHsgZGIgfSBmcm9tIFwiLi9tb2RlbHNcIjtcclxuaW1wb3J0IHsgcmVzdFJvdXRlciB9IGZyb20gXCIuL2FwaVwiO1xyXG5pbXBvcnQgY29uZmlnIGZyb20gXCIuL2NvbmZpZ1wiO1xyXG5pbXBvcnQgYXBwTWFuYWdlciBmcm9tIFwiLi9hcHBcIjtcclxuLy8gaW1wb3J0IGt1ZSBmcm9tICcuL2t1ZSc7XHJcbmltcG9ydCBcIi4vZXJyb3JzXCI7XHJcbmltcG9ydCBzY2hlZHVsZXIgZnJvbSBcIi4vc2NoZWR1bGVyXCI7XHJcbmltcG9ydCBwYXRoIGZyb20gXCJwYXRoXCI7XHJcbmltcG9ydCBjb3JzIGZyb20gXCJjb3JzXCI7XHJcbmltcG9ydCBjaGVja0V4cGlyZWRWb3VjaGVycyBmcm9tIFwiLi9jcm9uam9iXCI7XHJcbmdsb2JhbC5hcHBSb290ID0gcGF0aC5yZXNvbHZlKF9fZGlybmFtZSk7XHJcblxyXG5jb25zdCBQT1JUID0gY29uZmlnLmFwcC5wb3J0O1xyXG5jb25zdCBhcHAgPSBhcHBNYW5hZ2VyLnNldHVwKGNvbmZpZyk7XHJcblxyXG4vKmNvcnMgaGFuZGxpbmcqL1xyXG5hcHAudXNlKGNvcnMoKSk7XHJcblxyXG4vKiBSb3V0ZSBoYW5kbGluZyAqL1xyXG5hcHAudXNlKFwiL2FwaVwiLCByZXN0Um91dGVyKTtcclxuLy8gYXBwLnVzZSgnLycsIHdlYlJvdXRlcik7XHJcblxyXG5hcHAudXNlKChlcnJvciwgcmVxLCByZXMsIG5leHQpID0+IHtcclxuICBpZiAoIShlcnJvciBpbnN0YW5jZW9mIFJlcXVlc3RFcnJvcikpIHtcclxuICAgIGVycm9yID0gbmV3IFJlcXVlc3RFcnJvcihcIlNvbWUgRXJyb3IgT2NjdXJyZWRcIiwgNTAwLCBlcnJvci5tZXNzYWdlKTtcclxuICB9XHJcbiAgZXJyb3Iuc3RhdHVzID0gZXJyb3Iuc3RhdHVzIHx8IDUwMDtcclxuICByZXMuc3RhdHVzKGVycm9yLnN0YXR1cyk7XHJcbiAgbGV0IGNvbnR5cGUgPSByZXEuaGVhZGVyc1tcImNvbnRlbnQtdHlwZVwiXTtcclxuICB2YXIganNvbiA9ICEoIWNvbnR5cGUgfHwgY29udHlwZS5pbmRleE9mKFwiYXBwbGljYXRpb24vanNvblwiKSAhPT0gMCk7XHJcbiAgaWYgKGpzb24pIHtcclxuICAgIHJldHVybiByZXMuanNvbih7IGVycm9yczogZXJyb3IuZXJyb3JMaXN0IH0pO1xyXG4gIH0gZWxzZSB7XHJcbiAgICByZXMucmVuZGVyKGVycm9yLnN0YXR1cy50b1N0cmluZygpLCB7IGxheW91dDogbnVsbCB9KTtcclxuICB9XHJcbn0pO1xyXG5cclxuLy8ga3VlLmluaXQoKTtcclxuLyogRGF0YWJhc2UgQ29ubmVjdGlvbiAqL1xyXG5kYi5zZXF1ZWxpemVcclxuICAuYXV0aGVudGljYXRlKClcclxuICAudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICBjb25zb2xlLmxvZyhcIk5pY2UhIERhdGFiYXNlIGxvb2tzIGZpbmVcIik7XHJcbiAgICBzY2hlZHVsZXIuaW5pdCgpO1xyXG4gIH0pXHJcbiAgLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcclxuICAgIGNvbnNvbGUubG9nKGVyciwgXCJTb21ldGhpbmcgd2VudCB3cm9uZyB3aXRoIHRoZSBEYXRhYmFzZSBVcGRhdGUhXCIpO1xyXG4gIH0pO1xyXG5cclxuY2hlY2tFeHBpcmVkVm91Y2hlcnMuc3RhcnQoKTtcclxuXHJcbi8qIFN0YXJ0IExpc3RlbmluZyBzZXJ2aWNlICovXHJcbmFwcC5saXN0ZW4oUE9SVCwgKCkgPT4ge1xyXG4gIGNvbnNvbGUubG9nKGBTZXJ2ZXIgaXMgcnVubmluZyBhdCBQT1JUIGh0dHA6Ly9sb2NhbGhvc3Q6JHtQT1JUfWApO1xyXG59KTtcclxuIl0sIm1hcHBpbmdzIjoiOzs7QUFBQUEsT0FBQTtBQUNBLElBQUFDLE9BQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLElBQUEsR0FBQUYsT0FBQTtBQUNBLElBQUFHLFFBQUEsR0FBQUMsc0JBQUEsQ0FBQUosT0FBQTtBQUNBLElBQUFLLElBQUEsR0FBQUQsc0JBQUEsQ0FBQUosT0FBQTtBQUVBQSxPQUFBO0FBQ0EsSUFBQU0sVUFBQSxHQUFBRixzQkFBQSxDQUFBSixPQUFBO0FBQ0EsSUFBQU8sS0FBQSxHQUFBSCxzQkFBQSxDQUFBSixPQUFBO0FBQ0EsSUFBQVEsS0FBQSxHQUFBSixzQkFBQSxDQUFBSixPQUFBO0FBQ0EsSUFBQVMsUUFBQSxHQUFBTCxzQkFBQSxDQUFBSixPQUFBO0FBTEE7O0FBTUFVLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHQyxnQkFBSSxDQUFDQyxPQUFPLENBQUNDLFNBQVMsQ0FBQztBQUV4QyxJQUFNQyxJQUFJLEdBQUdDLG1CQUFNLENBQUNDLEdBQUcsQ0FBQ0MsSUFBSTtBQUM1QixJQUFNRCxHQUFHLEdBQUdFLGVBQVUsQ0FBQ0MsS0FBSyxDQUFDSixtQkFBTSxDQUFDOztBQUVwQztBQUNBQyxHQUFHLENBQUNJLEdBQUcsQ0FBQyxJQUFBQyxnQkFBSSxFQUFDLENBQUMsQ0FBQzs7QUFFZjtBQUNBTCxHQUFHLENBQUNJLEdBQUcsQ0FBQyxNQUFNLEVBQUVFLGVBQVUsQ0FBQztBQUMzQjs7QUFFQU4sR0FBRyxDQUFDSSxHQUFHLENBQUMsVUFBQ0csS0FBSyxFQUFFQyxHQUFHLEVBQUVDLEdBQUcsRUFBRUMsSUFBSSxFQUFLO0VBQ2pDLElBQUksRUFBRUgsS0FBSyxZQUFZSSxZQUFZLENBQUMsRUFBRTtJQUNwQ0osS0FBSyxHQUFHLElBQUlJLFlBQVksQ0FBQyxxQkFBcUIsRUFBRSxHQUFHLEVBQUVKLEtBQUssQ0FBQ0ssT0FBTyxDQUFDO0VBQ3JFO0VBQ0FMLEtBQUssQ0FBQ00sTUFBTSxHQUFHTixLQUFLLENBQUNNLE1BQU0sSUFBSSxHQUFHO0VBQ2xDSixHQUFHLENBQUNJLE1BQU0sQ0FBQ04sS0FBSyxDQUFDTSxNQUFNLENBQUM7RUFDeEIsSUFBSUMsT0FBTyxHQUFHTixHQUFHLENBQUNPLE9BQU8sQ0FBQyxjQUFjLENBQUM7RUFDekMsSUFBSUMsSUFBSSxHQUFHLEVBQUUsQ0FBQ0YsT0FBTyxJQUFJQSxPQUFPLENBQUNHLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztFQUNuRSxJQUFJRCxJQUFJLEVBQUU7SUFDUixPQUFPUCxHQUFHLENBQUNPLElBQUksQ0FBQztNQUFFRSxNQUFNLEVBQUVYLEtBQUssQ0FBQ1k7SUFBVSxDQUFDLENBQUM7RUFDOUMsQ0FBQyxNQUFNO0lBQ0xWLEdBQUcsQ0FBQ1csTUFBTSxDQUFDYixLQUFLLENBQUNNLE1BQU0sQ0FBQ1EsUUFBUSxDQUFDLENBQUMsRUFBRTtNQUFFQyxNQUFNLEVBQUU7SUFBSyxDQUFDLENBQUM7RUFDdkQ7QUFDRixDQUFDLENBQUM7O0FBRUY7QUFDQTtBQUNBQyxVQUFFLENBQUNDLFNBQVMsQ0FDVEMsWUFBWSxDQUFDLENBQUMsQ0FDZEMsSUFBSSxDQUFDLFlBQVk7RUFDaEJDLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLDJCQUEyQixDQUFDO0VBQ3hDQyxxQkFBUyxDQUFDQyxJQUFJLENBQUMsQ0FBQztBQUNsQixDQUFDLENBQUMsU0FDSSxDQUFDLFVBQVVDLEdBQUcsRUFBRTtFQUNwQkosT0FBTyxDQUFDQyxHQUFHLENBQUNHLEdBQUcsRUFBRSxnREFBZ0QsQ0FBQztBQUNwRSxDQUFDLENBQUM7QUFFSkMsbUJBQW9CLENBQUNDLEtBQUssQ0FBQyxDQUFDOztBQUU1QjtBQUNBakMsR0FBRyxDQUFDa0MsTUFBTSxDQUFDcEMsSUFBSSxFQUFFLFlBQU07RUFDckI2QixPQUFPLENBQUNDLEdBQUcsK0NBQUFPLE1BQUEsQ0FBK0NyQyxJQUFJLENBQUUsQ0FBQztBQUNuRSxDQUFDLENBQUMifQ==