"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("dotenv/config");
var _models = require("./models");
var _api = require("./api");
var _config2 = _interopRequireDefault(require("./config"));
var _app = _interopRequireDefault(require("./app"));
require("./errors");
var _scheduler = _interopRequireDefault(require("./scheduler"));
var _path = _interopRequireDefault(require("path"));
var _cors = _interopRequireDefault(require("cors"));
var _cronjob = _interopRequireDefault(require("./cronjob"));
// import kue from './kue';

global.appRoot = _path["default"].resolve(__dirname);
var PORT = _config2["default"].app.port;
var app = _app["default"].setup(_config2["default"]);

/*cors handling*/
app.use((0, _cors["default"])({
  origin: true
}));
app.options('*', (0, _cors["default"])());

/* Route handling */
app.use('/api', _api.restRouter);
// app.use('/', webRouter);

app.use(function (error, req, res, next) {
  if (!(error instanceof RequestError)) {
    error = new RequestError('Some Error Occurred', 500, error.message);
  }
  error.status = error.status || 500;
  res.status(error.status);
  var contype = req.headers['content-type'];
  var json = !(!contype || contype.indexOf('application/json') !== 0);
  if (json) {
    return res.json({
      errors: error.errorList
    });
  } else {
    res.render(error.status.toString(), {
      layout: null
    });
  }
});

// kue.init();
/* Database Connection */
_models.db.sequelize.authenticate().then(function () {
  console.log('Nice! Database looks fine');
  _scheduler["default"].init();
})["catch"](function (err) {
  console.log(err, "Something went wrong with the Database Update!");
});
_cronjob["default"].start();

/* Start Listening service */
app.listen(PORT, function () {
  console.log("Server is running at PORT http://localhost:".concat(PORT));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZXF1aXJlIiwiX21vZGVscyIsIl9hcGkiLCJfY29uZmlnMiIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfYXBwIiwiX3NjaGVkdWxlciIsIl9wYXRoIiwiX2NvcnMiLCJfY3JvbmpvYiIsImdsb2JhbCIsImFwcFJvb3QiLCJwYXRoIiwicmVzb2x2ZSIsIl9fZGlybmFtZSIsIlBPUlQiLCJjb25maWciLCJhcHAiLCJwb3J0IiwiYXBwTWFuYWdlciIsInNldHVwIiwidXNlIiwiY29ycyIsIm9yaWdpbiIsIm9wdGlvbnMiLCJyZXN0Um91dGVyIiwiZXJyb3IiLCJyZXEiLCJyZXMiLCJuZXh0IiwiUmVxdWVzdEVycm9yIiwibWVzc2FnZSIsInN0YXR1cyIsImNvbnR5cGUiLCJoZWFkZXJzIiwianNvbiIsImluZGV4T2YiLCJlcnJvcnMiLCJlcnJvckxpc3QiLCJyZW5kZXIiLCJ0b1N0cmluZyIsImxheW91dCIsImRiIiwic2VxdWVsaXplIiwiYXV0aGVudGljYXRlIiwidGhlbiIsImNvbnNvbGUiLCJsb2ciLCJzY2hlZHVsZXIiLCJpbml0IiwiZXJyIiwiY2hlY2tFeHBpcmVkVm91Y2hlcnMiLCJzdGFydCIsImxpc3RlbiIsImNvbmNhdCJdLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ2RvdGVudi9jb25maWcnO1xyXG5pbXBvcnQgeyBkYiB9IGZyb20gJy4vbW9kZWxzJztcclxuaW1wb3J0IHsgcmVzdFJvdXRlciB9IGZyb20gJy4vYXBpJztcclxuaW1wb3J0IGNvbmZpZyBmcm9tICcuL2NvbmZpZyc7XHJcbmltcG9ydCBhcHBNYW5hZ2VyIGZyb20gJy4vYXBwJztcclxuLy8gaW1wb3J0IGt1ZSBmcm9tICcuL2t1ZSc7XHJcbmltcG9ydCAnLi9lcnJvcnMnO1xyXG5pbXBvcnQgc2NoZWR1bGVyIGZyb20gJy4vc2NoZWR1bGVyJztcclxuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XHJcbmltcG9ydCBjb3JzIGZyb20gJ2NvcnMnO1xyXG5pbXBvcnQgY2hlY2tFeHBpcmVkVm91Y2hlcnMgZnJvbSAnLi9jcm9uam9iJztcclxuZ2xvYmFsLmFwcFJvb3QgPSBwYXRoLnJlc29sdmUoX19kaXJuYW1lKTtcclxuXHJcbmNvbnN0IFBPUlQgPSBjb25maWcuYXBwLnBvcnQ7XHJcbmNvbnN0IGFwcCA9IGFwcE1hbmFnZXIuc2V0dXAoY29uZmlnKTtcclxuXHJcbi8qY29ycyBoYW5kbGluZyovXHJcbmFwcC51c2UoY29ycyh7XHJcblx0b3JpZ2luOnRydWUsXHJcbn0pKTtcclxuYXBwLm9wdGlvbnMoJyonLCBjb3JzKCkpO1xyXG5cclxuLyogUm91dGUgaGFuZGxpbmcgKi9cclxuYXBwLnVzZSgnL2FwaScsIHJlc3RSb3V0ZXIpO1xyXG4vLyBhcHAudXNlKCcvJywgd2ViUm91dGVyKTtcclxuXHJcbmFwcC51c2UoKGVycm9yLCByZXEsIHJlcywgbmV4dCkgPT4ge1xyXG5cdGlmICghKGVycm9yIGluc3RhbmNlb2YgUmVxdWVzdEVycm9yKSkge1xyXG5cdFx0ZXJyb3IgPSBuZXcgUmVxdWVzdEVycm9yKCdTb21lIEVycm9yIE9jY3VycmVkJywgNTAwLCBlcnJvci5tZXNzYWdlKTtcclxuICAgIH1cclxuXHRcdGVycm9yLnN0YXR1cyA9IGVycm9yLnN0YXR1cyB8fCA1MDA7XHJcblx0cmVzLnN0YXR1cyhlcnJvci5zdGF0dXMpO1xyXG5cdGxldCBjb250eXBlID0gcmVxLmhlYWRlcnNbJ2NvbnRlbnQtdHlwZSddO1xyXG5cdHZhciBqc29uID0gISghY29udHlwZSB8fCBjb250eXBlLmluZGV4T2YoJ2FwcGxpY2F0aW9uL2pzb24nKSAhPT0gMCk7XHJcblx0aWYgKGpzb24pIHtcclxuXHRcdHJldHVybiByZXMuanNvbih7IGVycm9yczogZXJyb3IuZXJyb3JMaXN0IH0pO1xyXG5cdH0gZWxzZSB7XHJcblx0XHRyZXMucmVuZGVyKGVycm9yLnN0YXR1cy50b1N0cmluZygpLCB7bGF5b3V0OiBudWxsfSlcclxuXHR9XHJcbn0pO1xyXG5cclxuLy8ga3VlLmluaXQoKTtcclxuLyogRGF0YWJhc2UgQ29ubmVjdGlvbiAqL1xyXG5kYi5zZXF1ZWxpemUuYXV0aGVudGljYXRlKCkudGhlbihmdW5jdGlvbiAoKSB7XHJcblx0Y29uc29sZS5sb2coJ05pY2UhIERhdGFiYXNlIGxvb2tzIGZpbmUnKTtcclxuXHRzY2hlZHVsZXIuaW5pdCgpO1xyXG59KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XHJcblx0Y29uc29sZS5sb2coZXJyLCBcIlNvbWV0aGluZyB3ZW50IHdyb25nIHdpdGggdGhlIERhdGFiYXNlIFVwZGF0ZSFcIilcclxufSk7XHJcblxyXG5jaGVja0V4cGlyZWRWb3VjaGVycy5zdGFydCgpXHJcblxyXG4vKiBTdGFydCBMaXN0ZW5pbmcgc2VydmljZSAqL1xyXG5hcHAubGlzdGVuKFBPUlQsICgpID0+IHtcclxuXHRjb25zb2xlLmxvZyhgU2VydmVyIGlzIHJ1bm5pbmcgYXQgUE9SVCBodHRwOi8vbG9jYWxob3N0OiR7UE9SVH1gKTtcclxufSk7Il0sIm1hcHBpbmdzIjoiOzs7QUFBQUEsT0FBQTtBQUNBLElBQUFDLE9BQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLElBQUEsR0FBQUYsT0FBQTtBQUNBLElBQUFHLFFBQUEsR0FBQUMsc0JBQUEsQ0FBQUosT0FBQTtBQUNBLElBQUFLLElBQUEsR0FBQUQsc0JBQUEsQ0FBQUosT0FBQTtBQUVBQSxPQUFBO0FBQ0EsSUFBQU0sVUFBQSxHQUFBRixzQkFBQSxDQUFBSixPQUFBO0FBQ0EsSUFBQU8sS0FBQSxHQUFBSCxzQkFBQSxDQUFBSixPQUFBO0FBQ0EsSUFBQVEsS0FBQSxHQUFBSixzQkFBQSxDQUFBSixPQUFBO0FBQ0EsSUFBQVMsUUFBQSxHQUFBTCxzQkFBQSxDQUFBSixPQUFBO0FBTEE7O0FBTUFVLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHQyxnQkFBSSxDQUFDQyxPQUFPLENBQUNDLFNBQVMsQ0FBQztBQUV4QyxJQUFNQyxJQUFJLEdBQUdDLG1CQUFNLENBQUNDLEdBQUcsQ0FBQ0MsSUFBSTtBQUM1QixJQUFNRCxHQUFHLEdBQUdFLGVBQVUsQ0FBQ0MsS0FBSyxDQUFDSixtQkFBTSxDQUFDOztBQUVwQztBQUNBQyxHQUFHLENBQUNJLEdBQUcsQ0FBQyxJQUFBQyxnQkFBSSxFQUFDO0VBQ1pDLE1BQU0sRUFBQztBQUNSLENBQUMsQ0FBQyxDQUFDO0FBQ0hOLEdBQUcsQ0FBQ08sT0FBTyxDQUFDLEdBQUcsRUFBRSxJQUFBRixnQkFBSSxFQUFDLENBQUMsQ0FBQzs7QUFFeEI7QUFDQUwsR0FBRyxDQUFDSSxHQUFHLENBQUMsTUFBTSxFQUFFSSxlQUFVLENBQUM7QUFDM0I7O0FBRUFSLEdBQUcsQ0FBQ0ksR0FBRyxDQUFDLFVBQUNLLEtBQUssRUFBRUMsR0FBRyxFQUFFQyxHQUFHLEVBQUVDLElBQUksRUFBSztFQUNsQyxJQUFJLEVBQUVILEtBQUssWUFBWUksWUFBWSxDQUFDLEVBQUU7SUFDckNKLEtBQUssR0FBRyxJQUFJSSxZQUFZLENBQUMscUJBQXFCLEVBQUUsR0FBRyxFQUFFSixLQUFLLENBQUNLLE9BQU8sQ0FBQztFQUNqRTtFQUNGTCxLQUFLLENBQUNNLE1BQU0sR0FBR04sS0FBSyxDQUFDTSxNQUFNLElBQUksR0FBRztFQUNuQ0osR0FBRyxDQUFDSSxNQUFNLENBQUNOLEtBQUssQ0FBQ00sTUFBTSxDQUFDO0VBQ3hCLElBQUlDLE9BQU8sR0FBR04sR0FBRyxDQUFDTyxPQUFPLENBQUMsY0FBYyxDQUFDO0VBQ3pDLElBQUlDLElBQUksR0FBRyxFQUFFLENBQUNGLE9BQU8sSUFBSUEsT0FBTyxDQUFDRyxPQUFPLENBQUMsa0JBQWtCLENBQUMsS0FBSyxDQUFDLENBQUM7RUFDbkUsSUFBSUQsSUFBSSxFQUFFO0lBQ1QsT0FBT1AsR0FBRyxDQUFDTyxJQUFJLENBQUM7TUFBRUUsTUFBTSxFQUFFWCxLQUFLLENBQUNZO0lBQVUsQ0FBQyxDQUFDO0VBQzdDLENBQUMsTUFBTTtJQUNOVixHQUFHLENBQUNXLE1BQU0sQ0FBQ2IsS0FBSyxDQUFDTSxNQUFNLENBQUNRLFFBQVEsQ0FBQyxDQUFDLEVBQUU7TUFBQ0MsTUFBTSxFQUFFO0lBQUksQ0FBQyxDQUFDO0VBQ3BEO0FBQ0QsQ0FBQyxDQUFDOztBQUVGO0FBQ0E7QUFDQUMsVUFBRSxDQUFDQyxTQUFTLENBQUNDLFlBQVksQ0FBQyxDQUFDLENBQUNDLElBQUksQ0FBQyxZQUFZO0VBQzVDQyxPQUFPLENBQUNDLEdBQUcsQ0FBQywyQkFBMkIsQ0FBQztFQUN4Q0MscUJBQVMsQ0FBQ0MsSUFBSSxDQUFDLENBQUM7QUFDakIsQ0FBQyxDQUFDLFNBQU0sQ0FBQyxVQUFVQyxHQUFHLEVBQUU7RUFDdkJKLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDRyxHQUFHLEVBQUUsZ0RBQWdELENBQUM7QUFDbkUsQ0FBQyxDQUFDO0FBRUZDLG1CQUFvQixDQUFDQyxLQUFLLENBQUMsQ0FBQzs7QUFFNUI7QUFDQW5DLEdBQUcsQ0FBQ29DLE1BQU0sQ0FBQ3RDLElBQUksRUFBRSxZQUFNO0VBQ3RCK0IsT0FBTyxDQUFDQyxHQUFHLCtDQUFBTyxNQUFBLENBQStDdkMsSUFBSSxDQUFFLENBQUM7QUFDbEUsQ0FBQyxDQUFDIn0=