"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getDomainName = getDomainName;
exports.randomString = void 0;
exports.secondsToTime = secondsToTime;
exports.validateEmail = void 0;
var randomString = function randomString(len, charSet) {
  charSet = charSet || 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
  var randomString = '';
  for (var i = 0; i < len; i++) {
    var randomPoz = Math.floor(Math.random() * charSet.length);
    randomString += charSet.substring(randomPoz, randomPoz + 1);
  }
  return randomString;
};
exports.randomString = randomString;
var validateEmail = function validateEmail(email) {
  var re = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
  return re.test(String(email).toLowerCase());
};
exports.validateEmail = validateEmail;
function secondsToTime(secs) {
  var hours = Math.floor(secs / (60 * 60));
  var divisor_for_minutes = secs % (60 * 60);
  var minutes = Math.floor(divisor_for_minutes / 60);
  var divisor_for_seconds = divisor_for_minutes % 60;
  var seconds = Math.ceil(divisor_for_seconds);
  return hours.pad() + ":" + minutes.pad() + ":" + seconds.pad();
}
function getDomainName(hostname) {
  var domain = hostname;
  if (hostname != null) {
    var parts = hostname.split('.').reverse();
    if (parts != null && parts.length > 1) {
      domain = parts[1] + '.' + parts[0];
      if (hostname.toLowerCase().indexOf('.co.uk') != -1 && parts.length > 2) {
        domain = parts[2] + '.' + domain;
      }
    }
  }
  return domain;
}
global.json = function (obj) {
  return JSON.parse(JSON.stringify(obj));
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyYW5kb21TdHJpbmciLCJsZW4iLCJjaGFyU2V0IiwiaSIsInJhbmRvbVBveiIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsImxlbmd0aCIsInN1YnN0cmluZyIsImV4cG9ydHMiLCJ2YWxpZGF0ZUVtYWlsIiwiZW1haWwiLCJyZSIsInRlc3QiLCJTdHJpbmciLCJ0b0xvd2VyQ2FzZSIsInNlY29uZHNUb1RpbWUiLCJzZWNzIiwiaG91cnMiLCJkaXZpc29yX2Zvcl9taW51dGVzIiwibWludXRlcyIsImRpdmlzb3JfZm9yX3NlY29uZHMiLCJzZWNvbmRzIiwiY2VpbCIsInBhZCIsImdldERvbWFpbk5hbWUiLCJob3N0bmFtZSIsImRvbWFpbiIsInBhcnRzIiwic3BsaXQiLCJyZXZlcnNlIiwiaW5kZXhPZiIsImdsb2JhbCIsImpzb24iLCJvYmoiLCJKU09OIiwicGFyc2UiLCJzdHJpbmdpZnkiXSwic291cmNlcyI6WyIuLi9zcmMvZnVuY3Rpb25zLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB2YXIgcmFuZG9tU3RyaW5nID0gKGxlbiwgY2hhclNldCkgPT4ge1xyXG4gICAgY2hhclNldCA9IGNoYXJTZXQgfHwgJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5JztcclxuICAgIHZhciByYW5kb21TdHJpbmcgPSAnJztcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICB2YXIgcmFuZG9tUG96ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogY2hhclNldC5sZW5ndGgpO1xyXG4gICAgICAgIHJhbmRvbVN0cmluZyArPSBjaGFyU2V0LnN1YnN0cmluZyhyYW5kb21Qb3osIHJhbmRvbVBveiArIDEpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJhbmRvbVN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IHZhciB2YWxpZGF0ZUVtYWlsID0gZnVuY3Rpb24gKGVtYWlsKSB7XHJcbiAgICB2YXIgcmUgPSAvXigoW148PigpXFxbXFxdXFxcXC4sOzpcXHNAXCJdKyhcXC5bXjw+KClcXFtcXF1cXFxcLiw7Olxcc0BcIl0rKSopfChcIi4rXCIpKUAoKFxcW1swLTldezEsM31cXC5bMC05XXsxLDN9XFwuWzAtOV17MSwzfVxcLlswLTldezEsM31cXF0pfCgoW2EtekEtWlxcLTAtOV0rXFwuKStbYS16QS1aXXsyLH0pKSQvO1xyXG4gICAgcmV0dXJuIHJlLnRlc3QoU3RyaW5nKGVtYWlsKS50b0xvd2VyQ2FzZSgpKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNlY29uZHNUb1RpbWUoc2Vjcykge1xyXG4gICAgdmFyIGhvdXJzID0gTWF0aC5mbG9vcihzZWNzIC8gKDYwICogNjApKTtcclxuXHJcbiAgICB2YXIgZGl2aXNvcl9mb3JfbWludXRlcyA9IHNlY3MgJSAoNjAgKiA2MCk7XHJcbiAgICB2YXIgbWludXRlcyA9IE1hdGguZmxvb3IoZGl2aXNvcl9mb3JfbWludXRlcyAvIDYwKTtcclxuXHJcbiAgICB2YXIgZGl2aXNvcl9mb3Jfc2Vjb25kcyA9IGRpdmlzb3JfZm9yX21pbnV0ZXMgJSA2MDtcclxuICAgIHZhciBzZWNvbmRzID0gTWF0aC5jZWlsKGRpdmlzb3JfZm9yX3NlY29uZHMpO1xyXG5cclxuICAgIHJldHVybiBob3Vycy5wYWQoKSArIFwiOlwiICsgbWludXRlcy5wYWQoKSArIFwiOlwiICsgc2Vjb25kcy5wYWQoKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldERvbWFpbk5hbWUoaG9zdG5hbWUpIHtcclxuICAgIHZhciBkb21haW4gPSBob3N0bmFtZTtcclxuICAgIGlmIChob3N0bmFtZSAhPSBudWxsKSB7XHJcbiAgICAgICAgdmFyIHBhcnRzID0gaG9zdG5hbWUuc3BsaXQoJy4nKS5yZXZlcnNlKCk7XHJcblxyXG4gICAgICAgIGlmIChwYXJ0cyAhPSBudWxsICYmIHBhcnRzLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgICAgZG9tYWluID0gcGFydHNbMV0gKyAnLicgKyBwYXJ0c1swXTtcclxuXHJcbiAgICAgICAgICAgIGlmIChob3N0bmFtZS50b0xvd2VyQ2FzZSgpLmluZGV4T2YoJy5jby51aycpICE9IC0xICYmIHBhcnRzLmxlbmd0aCA+IDIpIHtcclxuICAgICAgICAgICAgICAgIGRvbWFpbiA9IHBhcnRzWzJdICsgJy4nICsgZG9tYWluO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGRvbWFpbjtcclxufVxyXG5cclxuZ2xvYmFsLmpzb24gPSAob2JqKSA9PiB7XHJcbiAgICByZXR1cm4gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShvYmopKVxyXG59Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBTyxJQUFJQSxZQUFZLEdBQUcsU0FBQUEsYUFBQ0MsR0FBRyxFQUFFQyxPQUFPLEVBQUs7RUFDeENBLE9BQU8sR0FBR0EsT0FBTyxJQUFJLGdFQUFnRTtFQUNyRixJQUFJRixZQUFZLEdBQUcsRUFBRTtFQUNyQixLQUFLLElBQUlHLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBR0YsR0FBRyxFQUFFRSxDQUFDLEVBQUUsRUFBRTtJQUMxQixJQUFJQyxTQUFTLEdBQUdDLElBQUksQ0FBQ0MsS0FBSyxDQUFDRCxJQUFJLENBQUNFLE1BQU0sQ0FBQyxDQUFDLEdBQUdMLE9BQU8sQ0FBQ00sTUFBTSxDQUFDO0lBQzFEUixZQUFZLElBQUlFLE9BQU8sQ0FBQ08sU0FBUyxDQUFDTCxTQUFTLEVBQUVBLFNBQVMsR0FBRyxDQUFDLENBQUM7RUFDL0Q7RUFDQSxPQUFPSixZQUFZO0FBQ3ZCLENBQUM7QUFBQVUsT0FBQSxDQUFBVixZQUFBLEdBQUFBLFlBQUE7QUFFTSxJQUFJVyxhQUFhLEdBQUcsU0FBaEJBLGFBQWFBLENBQWFDLEtBQUssRUFBRTtFQUN4QyxJQUFJQyxFQUFFLEdBQUcseUpBQXlKO0VBQ2xLLE9BQU9BLEVBQUUsQ0FBQ0MsSUFBSSxDQUFDQyxNQUFNLENBQUNILEtBQUssQ0FBQyxDQUFDSSxXQUFXLENBQUMsQ0FBQyxDQUFDO0FBQy9DLENBQUM7QUFBQU4sT0FBQSxDQUFBQyxhQUFBLEdBQUFBLGFBQUE7QUFFTSxTQUFTTSxhQUFhQSxDQUFDQyxJQUFJLEVBQUU7RUFDaEMsSUFBSUMsS0FBSyxHQUFHZCxJQUFJLENBQUNDLEtBQUssQ0FBQ1ksSUFBSSxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztFQUV4QyxJQUFJRSxtQkFBbUIsR0FBR0YsSUFBSSxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUM7RUFDMUMsSUFBSUcsT0FBTyxHQUFHaEIsSUFBSSxDQUFDQyxLQUFLLENBQUNjLG1CQUFtQixHQUFHLEVBQUUsQ0FBQztFQUVsRCxJQUFJRSxtQkFBbUIsR0FBR0YsbUJBQW1CLEdBQUcsRUFBRTtFQUNsRCxJQUFJRyxPQUFPLEdBQUdsQixJQUFJLENBQUNtQixJQUFJLENBQUNGLG1CQUFtQixDQUFDO0VBRTVDLE9BQU9ILEtBQUssQ0FBQ00sR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUdKLE9BQU8sQ0FBQ0ksR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUdGLE9BQU8sQ0FBQ0UsR0FBRyxDQUFDLENBQUM7QUFDbEU7QUFFTyxTQUFTQyxhQUFhQSxDQUFDQyxRQUFRLEVBQUU7RUFDcEMsSUFBSUMsTUFBTSxHQUFHRCxRQUFRO0VBQ3JCLElBQUlBLFFBQVEsSUFBSSxJQUFJLEVBQUU7SUFDbEIsSUFBSUUsS0FBSyxHQUFHRixRQUFRLENBQUNHLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQ0MsT0FBTyxDQUFDLENBQUM7SUFFekMsSUFBSUYsS0FBSyxJQUFJLElBQUksSUFBSUEsS0FBSyxDQUFDckIsTUFBTSxHQUFHLENBQUMsRUFBRTtNQUNuQ29CLE1BQU0sR0FBR0MsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBR0EsS0FBSyxDQUFDLENBQUMsQ0FBQztNQUVsQyxJQUFJRixRQUFRLENBQUNYLFdBQVcsQ0FBQyxDQUFDLENBQUNnQixPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUlILEtBQUssQ0FBQ3JCLE1BQU0sR0FBRyxDQUFDLEVBQUU7UUFDcEVvQixNQUFNLEdBQUdDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUdELE1BQU07TUFDcEM7SUFDSjtFQUNKO0VBQ0EsT0FBT0EsTUFBTTtBQUNqQjtBQUVBSyxNQUFNLENBQUNDLElBQUksR0FBRyxVQUFDQyxHQUFHLEVBQUs7RUFDbkIsT0FBT0MsSUFBSSxDQUFDQyxLQUFLLENBQUNELElBQUksQ0FBQ0UsU0FBUyxDQUFDSCxHQUFHLENBQUMsQ0FBQztBQUMxQyxDQUFDIn0=