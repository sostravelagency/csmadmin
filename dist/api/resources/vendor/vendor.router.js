"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.vendorRouter = void 0;
var _express = _interopRequireDefault(require("express"));
var _vendor = _interopRequireDefault(require("./vendor.controller"));
// import multer from 'multer';
// import path from 'path';

// import { sanitize } from '../../../middleware/sanitizer';
// import { jwtStrategy } from '../../../middleware/strategy';
// import { validateBody, schemas } from '../../../middleware/validator';
// var attachmentDir = path.join(path.dirname(require.main.filename), 'public', 'images','product')

// var storage = multer.diskStorage({
//     destination: function (req, file, cb) {
//       cb(null, attachmentDir)
//     },
//     filename: function (req, file, cb) {
//       cb(null, Date.now() + path.extname(file.originalname))
//     }
//   })
// var uploadAttachment = multer({ storage: storage, limits:{ fileSize: 10485760 }})

var vendorRouter = _express["default"].Router();
// vendorRouter.route('/create').post(validateBody(schemas.vendorDetails),vendorController.index);
exports.vendorRouter = vendorRouter;
vendorRouter.route('/create').post(_vendor["default"].index);
vendorRouter.route('/list').get(_vendor["default"].getAllvendor);
vendorRouter.route('/product-list').get(_vendor["default"].getAllVendorProduct);
vendorRouter.route('/product/getAllProductById').post(_vendor["default"].getProductByVendor);
vendorRouter.route('/update').post(_vendor["default"].vendorUpdate);
vendorRouter.route('/delete')["delete"](_vendor["default"].vendorDelete);
vendorRouter.route('/product-delete').post(_vendor["default"].vendorProductDelete);
vendorRouter.route('/product-add').post(_vendor["default"].vendorAddProduct);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZXhwcmVzcyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX3ZlbmRvciIsInZlbmRvclJvdXRlciIsImV4cHJlc3MiLCJSb3V0ZXIiLCJleHBvcnRzIiwicm91dGUiLCJwb3N0IiwidmVuZG9yQ29udHJvbGxlciIsImluZGV4IiwiZ2V0IiwiZ2V0QWxsdmVuZG9yIiwiZ2V0QWxsVmVuZG9yUHJvZHVjdCIsImdldFByb2R1Y3RCeVZlbmRvciIsInZlbmRvclVwZGF0ZSIsInZlbmRvckRlbGV0ZSIsInZlbmRvclByb2R1Y3REZWxldGUiLCJ2ZW5kb3JBZGRQcm9kdWN0Il0sInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FwaS9yZXNvdXJjZXMvdmVuZG9yL3ZlbmRvci5yb3V0ZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGV4cHJlc3MgZnJvbSAnZXhwcmVzcyc7XHJcbi8vIGltcG9ydCBtdWx0ZXIgZnJvbSAnbXVsdGVyJztcclxuLy8gaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XHJcbmltcG9ydCB2ZW5kb3JDb250cm9sbGVyIGZyb20gJy4vdmVuZG9yLmNvbnRyb2xsZXInO1xyXG4vLyBpbXBvcnQgeyBzYW5pdGl6ZSB9IGZyb20gJy4uLy4uLy4uL21pZGRsZXdhcmUvc2FuaXRpemVyJztcclxuLy8gaW1wb3J0IHsgand0U3RyYXRlZ3kgfSBmcm9tICcuLi8uLi8uLi9taWRkbGV3YXJlL3N0cmF0ZWd5JztcclxuLy8gaW1wb3J0IHsgdmFsaWRhdGVCb2R5LCBzY2hlbWFzIH0gZnJvbSAnLi4vLi4vLi4vbWlkZGxld2FyZS92YWxpZGF0b3InO1xyXG4vLyB2YXIgYXR0YWNobWVudERpciA9IHBhdGguam9pbihwYXRoLmRpcm5hbWUocmVxdWlyZS5tYWluLmZpbGVuYW1lKSwgJ3B1YmxpYycsICdpbWFnZXMnLCdwcm9kdWN0JylcclxuXHJcbi8vIHZhciBzdG9yYWdlID0gbXVsdGVyLmRpc2tTdG9yYWdlKHtcclxuLy8gICAgIGRlc3RpbmF0aW9uOiBmdW5jdGlvbiAocmVxLCBmaWxlLCBjYikge1xyXG4vLyAgICAgICBjYihudWxsLCBhdHRhY2htZW50RGlyKVxyXG4vLyAgICAgfSxcclxuLy8gICAgIGZpbGVuYW1lOiBmdW5jdGlvbiAocmVxLCBmaWxlLCBjYikge1xyXG4vLyAgICAgICBjYihudWxsLCBEYXRlLm5vdygpICsgcGF0aC5leHRuYW1lKGZpbGUub3JpZ2luYWxuYW1lKSlcclxuLy8gICAgIH1cclxuLy8gICB9KVxyXG4vLyB2YXIgdXBsb2FkQXR0YWNobWVudCA9IG11bHRlcih7IHN0b3JhZ2U6IHN0b3JhZ2UsIGxpbWl0czp7IGZpbGVTaXplOiAxMDQ4NTc2MCB9fSlcclxuXHJcblxyXG5leHBvcnQgY29uc3QgdmVuZG9yUm91dGVyID0gZXhwcmVzcy5Sb3V0ZXIoKTtcclxuLy8gdmVuZG9yUm91dGVyLnJvdXRlKCcvY3JlYXRlJykucG9zdCh2YWxpZGF0ZUJvZHkoc2NoZW1hcy52ZW5kb3JEZXRhaWxzKSx2ZW5kb3JDb250cm9sbGVyLmluZGV4KTtcclxudmVuZG9yUm91dGVyLnJvdXRlKCcvY3JlYXRlJykucG9zdCggdmVuZG9yQ29udHJvbGxlci5pbmRleCk7XHJcbnZlbmRvclJvdXRlci5yb3V0ZSgnL2xpc3QnKS5nZXQoIHZlbmRvckNvbnRyb2xsZXIuZ2V0QWxsdmVuZG9yKTtcclxudmVuZG9yUm91dGVyLnJvdXRlKCcvcHJvZHVjdC1saXN0JykuZ2V0KHZlbmRvckNvbnRyb2xsZXIuZ2V0QWxsVmVuZG9yUHJvZHVjdCk7XHJcbnZlbmRvclJvdXRlci5yb3V0ZSgnL3Byb2R1Y3QvZ2V0QWxsUHJvZHVjdEJ5SWQnKS5wb3N0KHZlbmRvckNvbnRyb2xsZXIuZ2V0UHJvZHVjdEJ5VmVuZG9yKTtcclxudmVuZG9yUm91dGVyLnJvdXRlKCcvdXBkYXRlJykucG9zdCh2ZW5kb3JDb250cm9sbGVyLnZlbmRvclVwZGF0ZSk7XHJcbnZlbmRvclJvdXRlci5yb3V0ZSgnL2RlbGV0ZScpLmRlbGV0ZSh2ZW5kb3JDb250cm9sbGVyLnZlbmRvckRlbGV0ZSk7XHJcbnZlbmRvclJvdXRlci5yb3V0ZSgnL3Byb2R1Y3QtZGVsZXRlJykucG9zdCh2ZW5kb3JDb250cm9sbGVyLnZlbmRvclByb2R1Y3REZWxldGUpO1xyXG52ZW5kb3JSb3V0ZXIucm91dGUoJy9wcm9kdWN0LWFkZCcpLnBvc3QodmVuZG9yQ29udHJvbGxlci52ZW5kb3JBZGRQcm9kdWN0KTtcclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLElBQUFBLFFBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUdBLElBQUFDLE9BQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUZBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUdPLElBQU1FLFlBQVksR0FBR0MsbUJBQU8sQ0FBQ0MsTUFBTSxDQUFDLENBQUM7QUFDNUM7QUFBQUMsT0FBQSxDQUFBSCxZQUFBLEdBQUFBLFlBQUE7QUFDQUEsWUFBWSxDQUFDSSxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUNDLElBQUksQ0FBRUMsa0JBQWdCLENBQUNDLEtBQUssQ0FBQztBQUMzRFAsWUFBWSxDQUFDSSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUNJLEdBQUcsQ0FBRUYsa0JBQWdCLENBQUNHLFlBQVksQ0FBQztBQUMvRFQsWUFBWSxDQUFDSSxLQUFLLENBQUMsZUFBZSxDQUFDLENBQUNJLEdBQUcsQ0FBQ0Ysa0JBQWdCLENBQUNJLG1CQUFtQixDQUFDO0FBQzdFVixZQUFZLENBQUNJLEtBQUssQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDQyxJQUFJLENBQUNDLGtCQUFnQixDQUFDSyxrQkFBa0IsQ0FBQztBQUMxRlgsWUFBWSxDQUFDSSxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUNDLElBQUksQ0FBQ0Msa0JBQWdCLENBQUNNLFlBQVksQ0FBQztBQUNqRVosWUFBWSxDQUFDSSxLQUFLLENBQUMsU0FBUyxDQUFDLFVBQU8sQ0FBQ0Usa0JBQWdCLENBQUNPLFlBQVksQ0FBQztBQUNuRWIsWUFBWSxDQUFDSSxLQUFLLENBQUMsaUJBQWlCLENBQUMsQ0FBQ0MsSUFBSSxDQUFDQyxrQkFBZ0IsQ0FBQ1EsbUJBQW1CLENBQUM7QUFDaEZkLFlBQVksQ0FBQ0ksS0FBSyxDQUFDLGNBQWMsQ0FBQyxDQUFDQyxJQUFJLENBQUNDLGtCQUFnQixDQUFDUyxnQkFBZ0IsQ0FBQyJ9