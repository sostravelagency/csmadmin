"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.db = void 0;
var _fs = require("fs");
var _path = require("path");
var _sequelize = _interopRequireDefault(require("sequelize"));
var _config = _interopRequireDefault(require("../config"));
var basename = (0, _path.basename)(__filename);
var db = {};
exports.db = db;
var sequelize = new _sequelize["default"](_config["default"].db.database, _config["default"].db.username, _config["default"].db.password, {
  host: _config["default"].db.host,
  // port: config.db.port,
  dialect: _config["default"].db.connection,
  logging: false,
  underscored: true,
  pool: {
    max: 20,
    min: 1,
    idle: 20000,
    acquire: 1000000
  },
  timestamps: true
});
(0, _fs.readdirSync)(__dirname).filter(function (file) {
  return file.indexOf('.') !== 0 && file !== basename && file.slice(-3) === '.js';
}).forEach(function (file) {
  var model = sequelize['import']((0, _path.join)(__dirname, file));
  db[model.name] = model;
});
Object.keys(db).forEach(function (modelName) {
  if (db[modelName].associate) {
    db[modelName].associate(db);
  }
});
db.sequelize = sequelize;
db.Sequelize = _sequelize["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZnMiLCJyZXF1aXJlIiwiX3BhdGgiLCJfc2VxdWVsaXplIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9jb25maWciLCJiYXNlbmFtZSIsIl9iYXNlbmFtZSIsIl9fZmlsZW5hbWUiLCJkYiIsImV4cG9ydHMiLCJzZXF1ZWxpemUiLCJTZXF1ZWxpemUiLCJjb25maWciLCJkYXRhYmFzZSIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJob3N0IiwiZGlhbGVjdCIsImNvbm5lY3Rpb24iLCJsb2dnaW5nIiwidW5kZXJzY29yZWQiLCJwb29sIiwibWF4IiwibWluIiwiaWRsZSIsImFjcXVpcmUiLCJ0aW1lc3RhbXBzIiwicmVhZGRpclN5bmMiLCJfX2Rpcm5hbWUiLCJmaWx0ZXIiLCJmaWxlIiwiaW5kZXhPZiIsInNsaWNlIiwiZm9yRWFjaCIsIm1vZGVsIiwiam9pbiIsIm5hbWUiLCJPYmplY3QiLCJrZXlzIiwibW9kZWxOYW1lIiwiYXNzb2NpYXRlIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vZGVscy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZWFkZGlyU3luYyB9IGZyb20gJ2ZzJztcclxuaW1wb3J0IHsgYmFzZW5hbWUgYXMgX2Jhc2VuYW1lLCBqb2luIH0gZnJvbSAncGF0aCc7XHJcbmltcG9ydCBTZXF1ZWxpemUgZnJvbSAnc2VxdWVsaXplJztcclxuaW1wb3J0IGNvbmZpZyBmcm9tICcuLi9jb25maWcnO1xyXG5jb25zdCBiYXNlbmFtZSA9IF9iYXNlbmFtZShfX2ZpbGVuYW1lKTtcclxuY29uc3QgZGIgPSB7fTtcclxuXHJcbmxldCBzZXF1ZWxpemUgPSBuZXcgU2VxdWVsaXplKGNvbmZpZy5kYi5kYXRhYmFzZSwgY29uZmlnLmRiLnVzZXJuYW1lLCBjb25maWcuZGIucGFzc3dvcmQsIHtcclxuICAgIGhvc3Q6IGNvbmZpZy5kYi5ob3N0LFxyXG4gICAgLy8gcG9ydDogY29uZmlnLmRiLnBvcnQsXHJcbiAgICBkaWFsZWN0OiBjb25maWcuZGIuY29ubmVjdGlvbixcclxuICAgIGxvZ2dpbmc6IGZhbHNlLFxyXG4gICAgdW5kZXJzY29yZWQ6IHRydWUsXHJcbiAgICBwb29sOiB7XHJcbiAgICAgICAgbWF4OiAyMCxcclxuICAgICAgICBtaW46IDEsXHJcbiAgICAgICAgaWRsZTogMjAwMDAsXHJcbiAgICAgICAgYWNxdWlyZTogMTAwMDAwMFxyXG4gICAgfSxcclxuICAgIHRpbWVzdGFtcHM6dHJ1ZVxyXG59KTtcclxuXHJcbnJlYWRkaXJTeW5jKF9fZGlybmFtZSlcclxuICAgIC5maWx0ZXIoZmlsZSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIChmaWxlLmluZGV4T2YoJy4nKSAhPT0gMCkgJiYgKGZpbGUgIT09IGJhc2VuYW1lKSAmJiAoZmlsZS5zbGljZSgtMykgPT09ICcuanMnKTtcclxuICAgIH0pXHJcbiAgICAuZm9yRWFjaChmaWxlID0+IHtcclxuICAgICAgICBjb25zdCBtb2RlbCA9IHNlcXVlbGl6ZVsnaW1wb3J0J10oam9pbihfX2Rpcm5hbWUsIGZpbGUpKTtcclxuICAgICAgICBkYlttb2RlbC5uYW1lXSA9IG1vZGVsO1xyXG4gICAgfSk7XHJcblxyXG5PYmplY3Qua2V5cyhkYikuZm9yRWFjaChtb2RlbE5hbWUgPT4ge1xyXG4gICAgaWYgKGRiW21vZGVsTmFtZV0uYXNzb2NpYXRlKSB7XHJcbiAgICAgICAgZGJbbW9kZWxOYW1lXS5hc3NvY2lhdGUoZGIpO1xyXG4gICAgfVxyXG59KTtcclxuXHJcbmRiLnNlcXVlbGl6ZSA9IHNlcXVlbGl6ZTtcclxuZGIuU2VxdWVsaXplID0gU2VxdWVsaXplO1xyXG5cclxuZXhwb3J0IHsgZGIgfTsiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxJQUFBQSxHQUFBLEdBQUFDLE9BQUE7QUFDQSxJQUFBQyxLQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxVQUFBLEdBQUFDLHNCQUFBLENBQUFILE9BQUE7QUFDQSxJQUFBSSxPQUFBLEdBQUFELHNCQUFBLENBQUFILE9BQUE7QUFDQSxJQUFNSyxRQUFRLEdBQUcsSUFBQUMsY0FBUyxFQUFDQyxVQUFVLENBQUM7QUFDdEMsSUFBTUMsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUFDQyxPQUFBLENBQUFELEVBQUEsR0FBQUEsRUFBQTtBQUVkLElBQUlFLFNBQVMsR0FBRyxJQUFJQyxxQkFBUyxDQUFDQyxrQkFBTSxDQUFDSixFQUFFLENBQUNLLFFBQVEsRUFBRUQsa0JBQU0sQ0FBQ0osRUFBRSxDQUFDTSxRQUFRLEVBQUVGLGtCQUFNLENBQUNKLEVBQUUsQ0FBQ08sUUFBUSxFQUFFO0VBQ3RGQyxJQUFJLEVBQUVKLGtCQUFNLENBQUNKLEVBQUUsQ0FBQ1EsSUFBSTtFQUNwQjtFQUNBQyxPQUFPLEVBQUVMLGtCQUFNLENBQUNKLEVBQUUsQ0FBQ1UsVUFBVTtFQUM3QkMsT0FBTyxFQUFFLEtBQUs7RUFDZEMsV0FBVyxFQUFFLElBQUk7RUFDakJDLElBQUksRUFBRTtJQUNGQyxHQUFHLEVBQUUsRUFBRTtJQUNQQyxHQUFHLEVBQUUsQ0FBQztJQUNOQyxJQUFJLEVBQUUsS0FBSztJQUNYQyxPQUFPLEVBQUU7RUFDYixDQUFDO0VBQ0RDLFVBQVUsRUFBQztBQUNmLENBQUMsQ0FBQztBQUVGLElBQUFDLGVBQVcsRUFBQ0MsU0FBUyxDQUFDLENBQ2pCQyxNQUFNLENBQUMsVUFBQUMsSUFBSSxFQUFJO0VBQ1osT0FBUUEsSUFBSSxDQUFDQyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFNRCxJQUFJLEtBQUt6QixRQUFTLElBQUt5QixJQUFJLENBQUNFLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEtBQU07QUFDekYsQ0FBQyxDQUFDLENBQ0RDLE9BQU8sQ0FBQyxVQUFBSCxJQUFJLEVBQUk7RUFDYixJQUFNSSxLQUFLLEdBQUd4QixTQUFTLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBQXlCLFVBQUksRUFBQ1AsU0FBUyxFQUFFRSxJQUFJLENBQUMsQ0FBQztFQUN4RHRCLEVBQUUsQ0FBQzBCLEtBQUssQ0FBQ0UsSUFBSSxDQUFDLEdBQUdGLEtBQUs7QUFDMUIsQ0FBQyxDQUFDO0FBRU5HLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDOUIsRUFBRSxDQUFDLENBQUN5QixPQUFPLENBQUMsVUFBQU0sU0FBUyxFQUFJO0VBQ2pDLElBQUkvQixFQUFFLENBQUMrQixTQUFTLENBQUMsQ0FBQ0MsU0FBUyxFQUFFO0lBQ3pCaEMsRUFBRSxDQUFDK0IsU0FBUyxDQUFDLENBQUNDLFNBQVMsQ0FBQ2hDLEVBQUUsQ0FBQztFQUMvQjtBQUNKLENBQUMsQ0FBQztBQUVGQSxFQUFFLENBQUNFLFNBQVMsR0FBR0EsU0FBUztBQUN4QkYsRUFBRSxDQUFDRyxTQUFTLEdBQUdBLHFCQUFTIn0=